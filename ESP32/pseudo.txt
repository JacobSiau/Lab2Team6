// MAIN COMMAND PROGRAM 

robot is blue circle
color, shape is input of destination's color/shape

go is true
while go is true:
    refresh CV data and put into key:value pairs
    grab robot (xr,yr) by predefined shape/color 
    grab destination (xf, yf) by input color/shape
    i = 0 to move robot or anything else to refresh CV data 
    if i is 0:
        call moveToPoint(xr, yr, xf, yf)
        refresh is false

////////////////////////////////////////////
// moveToPoint 
def moveToPoint(xo, yo, xf, yf):
    // robot is initially pointing in the +x direction
    calculate required dx and dy 
    goForward(dx)
    if dy is negative turn right 90*
    else turn left 90*
    goForward(dy)
////////////////////////////////////////////

////////////////////////////////////////////
// goForward
vforward = 50.45 // cm/s 
def goForward(dx):
    dt := dx / vforward // the time required to move robot dx
    convert dt to a valid 5-char string 
    publish forward, dt to esp32/dir 
    sleep for dt seconds
////////////////////////////////////////////

////////////////////////////////////////////
// turnLeft (turnRight)
dt := 0.25 // 0.25 seconds for a 90 degree turn 
def turnLeft():
    publish left(right), dt to esp32/dir
    sleep for 1 second
////////////////////////////////////////////

////////////////////////////////////////////
// goToBall
def goToBall():
    determine target goal
    determine x-coordinate of target goal
    if not facing in x-dir:
        turn 90 degrees
    while robot.y < ball.y:
        move in y-dir 
    while robot.x < ball.x:
        if IR.detect(ball): 
            stop()
        else: 
            move in x-dir
////////////////////////////////////////////

////////////////////////////////////////////
// aimBall
def aimBall():
    determine angle between ball and goal
    while angle > 0 and IR(ball):
        turn very slowly
    if angle > 0:
        find ball again 
    move straight forward fast as heck for 0.5s
    stop()
////////////////////////////////////////////

////////////////////////////////////////////
// Command Center
def main(): 
    request CV data
    convert to JSON
    store in Python dictionary 
////////////////////////////////////////////

////////////////////////////////////////////
// Huzzah 
def main():
    initialize Serial
    initialize pins & PWM
    while WiFi is not connected: 
        try to connect 
    while MQTT is not connected:
        try to connect 
    subscribe to all esp32/# topics 
    if a message is recieved    
        call control(topic, message)
////////////////////////////////////////////

////////////////////////////////////////////
// Huzzah control 
// control is called when a msg is recieved
def control(topic, message):
    if topic is dir:
        parse message
        call hBridge(dir_char)
////////////////////////////////////////////

////////////////////////////////////////////
// Huzzah hBridge
// dir is a character representing a direction
def hBridge(dir):  
    if dir is forward macro:
        writeOut(forward control pattern)
    elif dir is backward macro:
        writeOut(backward control pattern)
    .
    .
    .
////////////////////////////////////////////

Old go forward 
# # moves the robot forward a distance dx
        # # moves it at a speed of 50.45 cm/s
        #
        # # get the time to move the robot
        # dtnum = round(dx / __self__.vlinear, 2)
        print("goForward called for: " + str(dx) + " cm")
        # print("Robot needs to move for " + str(dtnum) + "s to go " + str(dx) + " cm")
        # # check if within range
        # if dtnum < 0.0 or dtnum > 9.99:
        #     print("ERROR: Forward time > 9s!")
        #     return
        # # dt will be a string in the form <#>.<#> or <#>.<#><#> etc..
        # dt = str(float(dtnum))
        # print("Double checking time to send: " + dt)
        # # from here we know the str is 0.0 to 9.9 (numerically),
        # # now we concatenate its digits without the decimal
        # # to send to the robot
        # timestr = ""
        # for i in range(0, len(dt)):
        #     if i is not 1:
        #         timestr += dt[i]
        # if len(timestr) is 3:
        #     timestr += '0'
        # if len(timestr) is 2:
        #     timestr += '00'
        # print("Time string being sent: " + timestr)
        # # ready to send to robot
        # m.publish(m, "esp32/dir", "F" + timestr)
        # m.publish(m, "esp32/status", "forward")
        # time.sleep(ceil(dtnum))




//////////////////////////////////////
passing the ball 
note that another thread is constantly updating position data 

    move R1 forward enough to touch the ball 
    move R1 out of the way backward 
    get xdist and ydist needed for R2 
    if y separation is greater than 15:
        if R2 y > ball y:
            turn R2 left
        else:
            turn R2 right
        move R2 forward ydist 
    if we turned once already:
        if the last turn was left:
            turn R2 right
        else:
            turn R2 left 
    move R2 forward xdist 
    indicate thatR2 should be there
//////////////////////////////////////